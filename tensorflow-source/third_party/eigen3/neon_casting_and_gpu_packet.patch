diff --git a/Eigen/src/Core/arch/NEON/TypeCasting.h b/Eigen/src/Core/arch/NEON/TypeCasting.h
index 4aa98e3..2734eac 100644
--- a/Eigen/src/Core/arch/NEON/TypeCasting.h
+++ b/Eigen/src/Core/arch/NEON/TypeCasting.h
@@ -347,6 +347,72 @@ template<> EIGEN_STRONG_INLINE Packet2l preinterpret<Packet2l,Packet2ul>(const P
 template<> EIGEN_STRONG_INLINE Packet2ul preinterpret<Packet2ul,Packet2l>(const Packet2l& a)
 { return vreinterpretq_u64_s64(a); }
 
+// Added for TF Jetson build
+template<> EIGEN_STRONG_INLINE Packet4ui pcast<Packet8us,Packet4ui>(const Packet8us& a)
+{ return vreinterpretq_u32_u16(a); }
+template<> EIGEN_STRONG_INLINE Packet4i pcast<Packet8us,Packet4i>(const Packet8us& a)
+{ return vreinterpretq_s32_u16(a); }
+template<> EIGEN_STRONG_INLINE Packet4f pcast<Packet8us,Packet4f>(const Packet8us& a)
+{ return vreinterpretq_f32_u16(a); }
+template<> EIGEN_STRONG_INLINE Packet8s pcast<Packet4i,Packet8s>(const Packet4i& a)
+{ return vreinterpretq_s16_s32(a); }
+template<> EIGEN_STRONG_INLINE Packet4f pcast<Packet16c,Packet4f>(const Packet16c& a)
+{ return vreinterpretq_f32_s8(a); }
+template<> EIGEN_STRONG_INLINE Packet4i pcast<Packet16c,Packet4i>(const Packet16c& a)
+{ return vreinterpretq_s32_s8(a); }
+template<> EIGEN_STRONG_INLINE Packet4ui pcast<Packet16c,Packet4ui>(const Packet16c& a)
+{ return vreinterpretq_u32_s8(a); }
+template<> EIGEN_STRONG_INLINE Packet8s pcast<Packet16c,Packet8s>(const Packet16c& a)
+{ return vreinterpretq_s16_s8(a); }
+template<> EIGEN_STRONG_INLINE Packet8us pcast<Packet16c,Packet8us>(const Packet16c& a)
+{ return vreinterpretq_u16_s8(a); }
+template<> EIGEN_STRONG_INLINE Packet4f pcast<Packet16uc,Packet4f>(const Packet16uc& a)
+{ return vreinterpretq_f32_u8(a); }
+template<> EIGEN_STRONG_INLINE Packet4i pcast<Packet16uc,Packet4i>(const Packet16uc& a)
+{ return vreinterpretq_s32_u8(a); }
+template<> EIGEN_STRONG_INLINE Packet4ui pcast<Packet16uc,Packet4ui>(const Packet16uc& a)
+{ return vreinterpretq_u32_u8(a); }
+template<> EIGEN_STRONG_INLINE Packet8s pcast<Packet16uc,Packet8s>(const Packet16uc& a)
+{ return vreinterpretq_s16_u8(a); }
+template<> EIGEN_STRONG_INLINE Packet8us pcast<Packet16uc,Packet8us>(const Packet16uc& a)
+{ return vreinterpretq_u16_u8(a); }
+template<> EIGEN_STRONG_INLINE Packet16uc pcast<Packet4ui,Packet16uc>(const Packet4ui& a)
+{ return vreinterpretq_u8_u32(a); }
+template<> EIGEN_STRONG_INLINE Packet16c pcast<Packet4ui,Packet16c>(const Packet4ui& a)
+{ return vreinterpretq_s8_u32(a); }
+template<> EIGEN_STRONG_INLINE Packet8us pcast<Packet4ui,Packet8us>(const Packet4ui& a)
+{ return vreinterpretq_u16_u32(a); }
+template<> EIGEN_STRONG_INLINE Packet8s pcast<Packet4ui,Packet8s>(const Packet4ui& a)
+{ return vreinterpretq_s16_u32(a); }
+template<> EIGEN_STRONG_INLINE Packet16uc pcast<Packet4i,Packet16uc>(const Packet4i& a)
+{ return vreinterpretq_u8_s32(a); }
+template<> EIGEN_STRONG_INLINE Packet16c pcast<Packet4i,Packet16c>(const Packet4i& a)
+{ return vreinterpretq_s8_s32(a); }
+template<> EIGEN_STRONG_INLINE Packet8us pcast<Packet4i,Packet8us>(const Packet4i& a)
+{ return vreinterpretq_u16_s32(a); }
+template<> EIGEN_STRONG_INLINE Packet16uc pcast<Packet4f,Packet16uc>(const Packet4f& a)
+{ return vreinterpretq_u8_f32(a); }
+template<> EIGEN_STRONG_INLINE Packet16c pcast<Packet4f,Packet16c>(const Packet4f& a)
+{ return vreinterpretq_s8_f32(a); }
+template<> EIGEN_STRONG_INLINE Packet8s pcast<Packet4f,Packet8s>(const Packet4f& a)
+{ return vreinterpretq_s16_f32(a); }
+template<> EIGEN_STRONG_INLINE Packet8us pcast<Packet4f,Packet8us>(const Packet4f& a)
+{ return vreinterpretq_u16_f32(a); }
+template<> EIGEN_STRONG_INLINE Packet16uc pcast<Packet8us,Packet16uc>(const Packet8us& a)
+{ return vreinterpretq_u8_u16(a); }
+template<> EIGEN_STRONG_INLINE Packet16c pcast<Packet8us,Packet16c>(const Packet8us& a)
+{ return vreinterpretq_s8_u16(a); }
+template<> EIGEN_STRONG_INLINE Packet16c pcast<Packet8s,Packet16c>(const Packet8s& a)
+{ return vreinterpretq_s8_s16(a); }
+template<> EIGEN_STRONG_INLINE Packet16uc pcast<Packet8s,Packet16uc>(const Packet8s& a)
+{ return vreinterpretq_u8_s16(a); }
+template<> EIGEN_STRONG_INLINE Packet4i pcast<Packet8s,Packet4i>(const Packet8s& a)
+{ return vreinterpretq_s32_s16(a); }
+template<> EIGEN_STRONG_INLINE Packet4ui pcast<Packet8s,Packet4ui>(const Packet8s& a)
+{ return vreinterpretq_u32_s16(a); }
+template<> EIGEN_STRONG_INLINE Packet4f pcast<Packet8s,Packet4f>(const Packet8s& a)
+{ return vreinterpretq_f32_s16(a); }
+
 #if EIGEN_ARCH_ARM64
 
 template<> EIGEN_STRONG_INLINE Packet2f pcast<Packet2d,Packet2f>(const Packet2d& a) { return vcvt_f32_f64(a); }
diff --git a/Eigen/src/Geometry/arch/Geometry_SSE.h b/Eigen/src/Geometry/arch/Geometry_SSE.h
index 108cc9f..43677f4 100644
--- a/Eigen/src/Geometry/arch/Geometry_SSE.h
+++ b/Eigen/src/Geometry/arch/Geometry_SSE.h
@@ -33,13 +33,14 @@ struct quat_product<Architecture::SSE, Derived, OtherDerived, float>
     Packet4f b = be.template packet<BAlignment,Packet4f>(0);
     Packet4f s1 = pmul(vec4f_swizzle1(a,1,2,0,2),vec4f_swizzle1(b,2,0,1,2));
     Packet4f s2 = pmul(vec4f_swizzle1(a,3,3,3,1),vec4f_swizzle1(b,0,1,2,1));
-    pstoret<float,Packet4f,ResAlignment>(
-              &res.x(),
-              padd(psub(pmul(a,vec4f_swizzle1(b,3,3,3,3)),
-                                    pmul(vec4f_swizzle1(a,2,0,1,0),
-                                               vec4f_swizzle1(b,1,2,0,0))),
-                         pxor(mask,padd(s1,s2))));
-    
+    pstoret<float, Packet4f, ResAlignment>(
+        &res.x(),
+        padd<Packet4f>(
+            psub<Packet4f>(pmul<Packet4f>(a, vec4f_swizzle1(b, 3, 3, 3, 3)),
+                           pmul<Packet4f>(vec4f_swizzle1(a, 2, 0, 1, 0),
+                                          vec4f_swizzle1(b, 1, 2, 0, 0))),
+            pxor<Packet4f>(mask, padd(s1, s2))));
+
     return res;
   }
 };
